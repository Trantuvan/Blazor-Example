@page "/"
@using BlazingPizza.Services

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject OrderState OrderState

<div class="top-bar">
    <NavLink class="logo" href="">
        <img src="img/logo.svg" />
    </NavLink>

    <NavLink href="" class="nav-tab" Match="NavLinkMatch.All">
        <img src="img/pizza-slice.svg" />
        <div>Get Pizza</div>
    </NavLink>

    <NavLink href="myorders" class="nav-tab">
        <img src="img/bike.svg" />
        <div>My Orders</div>
    </NavLink>
</div>

<div class="main">
    <h1>Blazing Pizzas</h1>
    <ul class="pizza-cards">
        @if (specials == null)
            return;
        @foreach (var special in specials)
        {
                <li style="background-image: url('@special.ImageUrl');"
                    @onclick="()=>OrderState.ShowingConfigurePizzaDialog(special)">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                    @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
        }
    </ul>
</div>

<div class="sidebar">
    @if (order.Pizzas.Any() == false)
    {
            <div class="empty-cart">Choose a pizza <br /> to get started</div>
    }
    else
    {
            <div class="order-contents">
                <h2>Your Order</h2>
            @foreach (var configuredPizza in order.Pizzas)
            {
                        <div class="cart-item">
                            <div class="title">@configuredPizza.Size" @configuredPizza.Special.Name</div>
                            <div class="item-price">@configuredPizza.GetFormattedTotalPrice()</div>
                            <a class="delete-item" @onclick="()=>OrderState.RemoveConfiguredPizza(configuredPizza)">x</a>
                        </div>
            }
            </div>
    }
    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(order.Pizzas.Count() == 0 ? "btn btn-warning disabled":"btn btn-warning")">
            Order >
        </a>
    </div>
</div>

@if (OrderState.ShowingConfigureDialog)
{
        <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza"
                              OnCancelled="OrderState.CancelConfiguringPizzaDialog"
                              OnConfirmed="OrderState.ConfirmConfiguringPizzaDialog" />
}

@code {
    private Order order => OrderState.Order;
    private List<PizzaSpecial> specials = new();

    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + "specials");
    }
}